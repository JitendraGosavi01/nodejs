{"version":3,"sources":["../../../api/controller/user.js"],"names":["mongoose","require","Users","UserProfile","httpStatus","bcrypt","exports","getAllUsers","req","res","next","host","protocol","headers","find","populate","exec","then","docs","response","count","length","users","map","id","doc","_id","name","email","gender","request","type","url","status","HTTP_CODE","OK","json","message","PAGE_NOT_FOUND","catch","INTERNAL_SERVER_ERROR","error","createUser","hash","body","password","err","user","Types","ObjectId","remember_token","role","save","createdUser","result","createProfile","profile","address","dob","user_id","app_type","device_id","place","region","description","getUser","userId","params","findById","userInformation","getProfile","profileId","deleteUser","findByIdAndRemove","updateUser","update","$set","updated_user"],"mappings":"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","file":"user.js","sourcesContent":["const mongoose = require('mongoose');\nconst Users = require('../models/users');\nconst UserProfile = require('../models/userProfiles');\nconst httpStatus = require('../constants');\nconst bcrypt = require('bcrypt');\n\n/**\n * Get all users.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.getAllUsers = (req, res, next) => {\n    let host = req.protocol + '://' + req.headers.host;\n    Users.find()\n        .populate('profile', 'gender')\n        .exec()\n        .then(docs => {\n            if (docs) {\n                let response = {\n                    count: docs.length,\n                    users: docs.map(doc => {\n                        return {\n                            id: doc._id,\n                            name: doc.name,\n                            email: doc.email,\n                            gender: doc.gender,\n                            request: {\n                                type: 'GET',\n                                url: host + '/users/' + doc._id\n                            }\n                        }\n                    })\n                }\n                res.status(httpStatus.HTTP_CODE.OK)\n                    .json({\n                        message: \"User information\",\n                        response\n                    })\n            } else {\n                res.status(httpStatus.HTTP_CODE.PAGE_NOT_FOUND)\n                    .json({\n                        message: \"Users is not available!\"\n                    })\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        })\n};\n\n/**\n * Creating user.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.createUser = (req, res, next) => {\n   \n    let host = req.protocol + '://' + req.headers.host;\n    bcrypt.hash(req.body.password, 10, (err, hash) => {\n        if (err) {\n            return res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: err\n                })\n        } else {\n            let user = new Users({\n                _id: mongoose.Types.ObjectId(),\n                name: req.body.name,\n                email: req.body.email,\n                password: hash,\n                remember_token: req.body.remember_token,\n                role: 0\n            });\n            user.save()\n                .then(result => {\n                    res.status(httpStatus.HTTP_CODE.OK)\n                        .json({\n                            message: \"User created successfully\",\n                            createdUser: {\n                                id: result._id,\n                                name: result.name,\n                                email: result.email,\n                                password : result.password,\n                                request: {\n                                    type: 'GET',\n                                    url: host + '/users/' + result._id\n                                }\n                            }\n                        });\n                })\n                .catch(error => {\n                    res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                        .json({\n                            error: error\n                        })\n                });\n        }\n    });\n};\n\n/**\n * Creating user profile.\n * @param req\n * @param res\n * @param next\n */\nexports.createProfile = (req, res, next) => {\n    let host = req.protocol + '://' + req.headers.host;\n    let profile = new UserProfile({\n        _id: mongoose.Types.ObjectId(),\n        name: req.body.name,\n        address: req.body.address,\n        dob: req.body.dob,\n        user_id: req.body.user_id,\n        app_type: req.body.app_type,\n        device_id: req.body.device_id,\n        place: req.body.place,\n        region: req.body.region,\n        gender: req.body.gender,\n    });\n    profile.save()\n        .then(result => {\n            res.status(httpStatus.HTTP_CODE.OK)\n                .json({\n                    message: \"User Profile created successfully\",\n                    request: {\n                        type: 'GET',\n                        description: 'You can get UserProfile from below Request.',\n                        url: host + '/users/profile/' + result._id\n                    }\n                });\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        });\n};\n\n/**\n * Getting user By Id.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.getUser = (req, res, next) => {\n    let userId = req.params.userId;\n    Users.findById({_id: userId})\n        .exec()\n        .then(doc => {\n            if (doc) {\n                res.status(httpStatus.HTTP_CODE.OK)\n                    .json({\n                        message: \"User information for \" + userId,\n                        userInformation: doc\n                    })\n            } else {\n                res.status(httpStatus.HTTP_CODE.PAGE_NOT_FOUND)\n                    .json({\n                        message: \"User is not available for this user id \" + userId\n                    })\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        })\n};\n\n/**\n * Getting profile by ID.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.getProfile = (req, res, next) => {\n    let profileId = req.params.profileId;\n    UserProfile.findById({_id: profileId})\n        .exec()\n        .then(doc => {\n            if (doc) {\n                res.status(httpStatus.HTTP_CODE.OK)\n                    .json({\n                        message: \"User information for \" + profileId,\n                        userInformation: doc\n                    })\n            } else {\n                res.status(httpStatus.HTTP_CODE.PAGE_NOT_FOUND)\n                    .json({\n                        message: \"User is not available for this user id \" + profileId\n                    })\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        })\n};\n\n/**\n * Deleting user By id.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.deleteUser = (req, res, next) => {\n    let userId = req.params.userId;\n    Users.findById({_id: userId})\n        .exec()\n        .then(doc => {\n            if (doc) {\n                Users.findByIdAndRemove({_id: userId})\n                    .exec()\n                    .then(result => {\n                        res.status(httpStatus.HTTP_CODE.OK)\n                            .json({\n                                message: \"User deleted for user id \" + userId\n                            })\n                    })\n                    .catch(error => {\n                        res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                            .json({\n                                error\n                            })\n                    })\n            } else {\n                res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                    .json({\n                        message: 'User is already deleted.'\n                    })\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    message: error\n                })\n        })\n};\n\n/**\n * Updating user By id.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.updateUser = (req, res, next) => {\n    let userId = req.params.userId;\n    Users.update({_id: userId}, {\n        $set: {\n            name: req.body.name,\n            email: req.body.email,\n            password: req.body.password,\n        }\n    }).exec()\n        .then(result => {\n            res.status(httpStatus.HTTP_CODE.OK)\n                .json({\n                    message: \"User has been updated successfully\",\n                    updated_user: result\n                })\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    message: \"Failed to update information!\",\n                    error: error\n                })\n        })\n};\n\n\n"]}