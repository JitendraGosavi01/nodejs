{"version":3,"sources":["../../../api/controller/userController.js"],"names":["mongoose","require","Users","httpStatus","salt","bcrypt","jwt","exports","getAllUsers","req","res","next","host","protocol","headers","find","populate","exec","then","docs","response","count","length","users","map","id","doc","_id","name","email","gender","request","type","url","status","HTTP_CODE","OK","json","message","PAGE_NOT_FOUND","catch","INTERNAL_SERVER_ERROR","error","createUser","body","user","CONFLICT","hash","password","err","Types","ObjectId","role","save","createdUser","result","createProfile","profile","UserProfile","address","dob","user_id","app_type","device_id","place","region","description","getUser","userId","params","findById","userInformation","getProfile","profileId","deleteUser","findByIdAndRemove","updateUser","update","$set","updated_user","userLogin","UNAUTHORIZED","compare","token","sign","userid","JWT_TOKEN_SALT","expiresIn"],"mappings":"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","file":"userController.js","sourcesContent":["const mongoose = require('mongoose');\nconst Users = require('../models/users');\nconst httpStatus = require('../constants');\nconst salt = require('../constants');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\n\n/**\n * Get all users.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.getAllUsers = (req, res, next) => {\n    let host = req.protocol + '://' + req.headers.host;\n    Users.find()\n        .populate('profile', 'gender')\n        .exec()\n        .then(docs => {\n            if (docs) {\n                let response = {\n                    count: docs.length,\n                    users: docs.map(doc => {\n                        return {\n                            id: doc._id,\n                            name: doc.name,\n                            email: doc.email,\n                            gender: doc.gender,\n                            request: {\n                                type: 'GET',\n                                url: host + '/users/' + doc._id\n                            }\n                        }\n                    })\n                }\n                res.status(httpStatus.HTTP_CODE.OK)\n                    .json({\n                        message: \"User information\",\n                        response\n                    })\n            } else {\n                res.status(httpStatus.HTTP_CODE.PAGE_NOT_FOUND)\n                    .json({\n                        message: \"Users is not available!\"\n                    })\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        })\n};\n\n/**\n * Creating user.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.createUser = (req, res, next) => {\n\n    let host = req.protocol + '://' + req.headers.host;\n    Users.find({email: req.body.email})\n        .exec()\n        .then(user => {\n\n            if (user.length >= 1) {\n                return res.status(httpStatus.HTTP_CODE.CONFLICT).json({\n                    message: 'Email already exists',\n                })\n            } else {\n                bcrypt.hash(req.body.password, 10, (err, hash) => {\n                    if (err) {\n                        return res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                            .json({\n                                error: err\n                            })\n                    } else {\n                        let user = new Users({\n                            _id: mongoose.Types.ObjectId(),\n                            name: req.body.name,\n                            email: req.body.email,\n                            password: hash,\n                            role: 0\n                        });\n                        user.save()\n                            .then(result => {\n                                res.status(httpStatus.HTTP_CODE.OK)\n                                    .json({\n                                        message: \"User created successfully\",\n                                        createdUser: {\n                                            id: result._id,\n                                            name: result.name,\n                                            email: result.email,\n                                            password: result.password,\n                                            request: {\n                                                type: 'GET',\n                                                url: host + '/users/' + result._id\n                                            }\n                                        }\n                                    });\n                            })\n                            .catch(error => {\n                                res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                                    .json({\n                                        error: error\n                                    })\n                            });\n                    }\n                });\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        });\n\n};\n\n/**\n * Creating user profile.\n * @param req\n * @param res\n * @param next\n */\nexports.createProfile = (req, res, next) => {\n    let host = req.protocol + '://' + req.headers.host;\n    let profile = new UserProfile({\n        _id: mongoose.Types.ObjectId(),\n        name: req.body.name,\n        address: req.body.address,\n        dob: req.body.dob,\n        user_id: req.body.user_id,\n        app_type: req.body.app_type,\n        device_id: req.body.device_id,\n        place: req.body.place,\n        region: req.body.region,\n        gender: req.body.gender,\n    });\n    profile.save()\n        .then(result => {\n            res.status(httpStatus.HTTP_CODE.OK)\n                .json({\n                    message: \"User Profile created successfully\",\n                    request: {\n                        type: 'GET',\n                        description: 'You can get UserProfile from below Request.',\n                        url: host + '/users/profile/' + result._id\n                    }\n                });\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        });\n};\n\n/**\n * Getting user By Id.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.getUser = (req, res, next) => {\n    let userId = req.params.userId;\n    Users.findById({_id: userId})\n        .exec()\n        .then(doc => {\n            if (doc) {\n                res.status(httpStatus.HTTP_CODE.OK)\n                    .json({\n                        message: \"User information for \" + userId,\n                        userInformation: doc\n                    })\n            } else {\n                res.status(httpStatus.HTTP_CODE.PAGE_NOT_FOUND)\n                    .json({\n                        message: \"User is not available for this user id \" + userId\n                    })\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        })\n};\n\n/**\n * Getting profile by ID.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.getProfile = (req, res, next) => {\n    let profileId = req.params.profileId;\n    UserProfile.findById({_id: profileId})\n        .exec()\n        .then(doc => {\n            if (doc) {\n                res.status(httpStatus.HTTP_CODE.OK)\n                    .json({\n                        message: \"User information for \" + profileId,\n                        userInformation: doc\n                    })\n            } else {\n                res.status(httpStatus.HTTP_CODE.PAGE_NOT_FOUND)\n                    .json({\n                        message: \"User is not available for this user id \" + profileId\n                    })\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    error: error\n                })\n        })\n};\n\n/**\n * Deleting user By id.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.deleteUser = (req, res, next) => {\n    let userId = req.params.userId;\n    Users.findById({_id: userId})\n        .exec()\n        .then(doc => {\n            if (doc) {\n                Users.findByIdAndRemove({_id: userId})\n                    .exec()\n                    .then(result => {\n                        res.status(httpStatus.HTTP_CODE.OK)\n                            .json({\n                                message: \"User deleted for user id \" + userId\n                            })\n                    })\n                    .catch(error => {\n                        res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                            .json({\n                                error\n                            })\n                    })\n            } else {\n                res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                    .json({\n                        message: 'User is already deleted.'\n                    })\n            }\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    message: error\n                })\n        })\n};\n\n/**\n * Updating user By id.\n *\n * @param req\n * @param res\n * @param next\n */\nexports.updateUser = (req, res, next) => {\n    let userId = req.params.userId;\n    Users.update({_id: userId}, {\n        $set: {\n            name: req.body.name,\n            email: req.body.email,\n            password: req.body.password,\n        }\n    }).exec()\n        .then(result => {\n            res.status(httpStatus.HTTP_CODE.OK)\n                .json({\n                    message: \"User has been updated successfully\",\n                    updated_user: result\n                })\n        })\n        .catch(error => {\n            res.status(httpStatus.HTTP_CODE.INTERNAL_SERVER_ERROR)\n                .json({\n                    message: \"Failed to update information!\",\n                    error: error\n                })\n        })\n};\n\nexports.userLogin = (req, res, next) => {\n    Users.find({email: req.body.email})\n        .exec()\n        .then(user => {\n            if (user.length < 1) {\n                res.status(httpStatus.HTTP_CODE.UNAUTHORIZED)\n                    .json({\n                        message: \"Authentication failed!\",\n                    });\n            } else {\n                bcrypt.compare(req.body.password, user[0].password, (err, result) => {\n\n                    if (result) {\n                        const token = jwt.sign({\n                            email: user[0].email,\n                            userid: user[0]._id\n                        }, salt.JWT_TOKEN_SALT, {\n                            expiresIn: '1hr'\n                        });\n                        res.status(httpStatus.HTTP_CODE.OK)\n                            .json({\n                                message: \"Authentication success\",\n                                token: token\n                            })\n                    } else {\n                        res.status(httpStatus.HTTP_CODE.UNAUTHORIZED)\n                            .json({\n                                message: \"Authentication failed!\",\n                            });\n                    }\n                });\n            }\n        })\n        .catch(err => {\n            res.status(httpStatus.HTTP_CODE.UNAUTHORIZED)\n                .json({\n                    message: err,\n                });\n        });\n};\n\n\n"]}