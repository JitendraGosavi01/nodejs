{"version":3,"sources":["../app.js"],"names":["express","require","app","morgan","bodyParser","cors","mongoose","connect","usersRoutes","screenRoutes","use","json","req","res","next","header","method","status","error","Error","message","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,MAAMF,SAAZ;AACA,IAAMG,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,aAAaH,QAAQ,aAAR,CAAnB;AACA,IAAMI,OAAOJ,QAAQ,MAAR,CAAb;AACA,IAAMK,WAAWL,QAAQ,UAAR,CAAjB;;AAEAK,SAASC,OAAT,CAAiB,kCAAjB;;AAEA,IAAMC,cAAcP,QAAQ,oBAAR,CAApB;AACA,IAAMQ,eAAeR,QAAQ,qBAAR,CAArB;;AAEA;;;AAGAC,IAAIQ,GAAJ,CAAQP,OAAO,KAAP,CAAR;;AAEA;;;AAGAD,IAAIQ,GAAJ,CAAQN,WAAWO,IAAX,EAAR;;AAEA;;;AAGA;AACAT,IAAIQ,GAAJ,CAAQ,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxBD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C,EADwB,CACwB;AAChDF,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,+DAA1C,EAFwB,CAEoF;AAC5G,MAAIH,IAAII,MAAJ,KAAe,SAAnB,EAA8B;AAC1BH,QAAIE,MAAJ,CAAW,6BAAX,EAA0C,+BAA1C,EAD0B,CACkD;AAC5E,WAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,EAArB,CAAP;AACH;AACDG;AACH,CARD;;AAUA;;;AAGAZ,IAAIQ,GAAJ,CAAQ,QAAR,EAAkBF,WAAlB;AACAN,IAAIQ,GAAJ,CAAQ,UAAR,EAAoBD,YAApB;;AAEA;;;;AAIAP,IAAIQ,GAAJ,CAAQ,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,MAAMI,QAAQ,IAAIC,KAAJ,CAAU,YAAV,CAAd;AACAD,QAAMD,MAAN,GAAe,GAAf;AACAH,OAAKI,KAAL;AACH,CAJD;;AAMA;;;AAGAhB,IAAIQ,GAAJ,CAAQ,UAACQ,KAAD,EAAQN,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAA2B;AAC/BD,MAAII,MAAJ,CAAWC,MAAMD,MAAN,IAAgB,GAA3B;AACAJ,MAAIF,IAAJ,CAAS;AACLO,WAAO;AACHE,eAASF,MAAME;AADZ;AADF,GAAT;AAKH,CAPD;;AASAC,OAAOC,OAAP,GAAiBpB,GAAjB","file":"app.js","sourcesContent":["const express = require('express');\nconst app = express();\nconst morgan = require('morgan');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://127.0.0.1:27017/potato');\n\nconst usersRoutes = require('./api/routes/users');\nconst screenRoutes = require('./api/routes/screen');\n\n/**\n * Middleware for keeping track for requested url.\n */\napp.use(morgan('dev'));\n\n/**\n * Middleware for parsing URL encoded data and JSON data.\n */\napp.use(bodyParser.json());\n\n/**\n * Middleware to handle CORS error.\n */\n//app.use(cors()); or bellow\napp.use((req, res, next) => {\n    res.header(\"Access-Control-Allow-Origin\", \"*\"); //allowing all hosts to being send request\n    res.header(\"Access-Control-Allow-Header\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\"); //accepting provided headers\n    if (req.method === 'OPTIONS') {\n        res.header(\"Access-Control-Allow-Method\", \"PUT, POST, DELETE, GET, PATCH\"); //allowing provided methods\n        return res.status(200).json({});\n    }\n    next();\n});\n\n/**\n * Middleware for handling requests\n */\napp.use('/users', usersRoutes);\napp.use('/screens', screenRoutes);\n\n/**\n * Handling invalid routes.\n */\n\napp.use((req, res, next) => {\n    const error = new Error('Not Found!');\n    error.status = 404;\n    next(error);\n});\n\n/**\n * Handling errors occurred in page.\n */\napp.use((error, req, res, next) => {\n    res.status(error.status || 500);\n    res.json({\n        error: {\n            message: error.message\n        }\n    });\n})\n\nmodule.exports = app;"]}